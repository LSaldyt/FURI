(ns sence.maze
  (:require [sence.astar :refer [astar]]))
;(defn astar 
;  ([branches, start, end, distance]

;@...
;..0.
;.00.
;...*

(def toy-maze { 
  [0 0] [[0 1] [1 0]]
  [0 1] [[0 2] [0 0] [1 0]]
  [0 2] [[0 3] [1 3] [1 2] [0 1]]
  [0 3] [[1 3] [0 2] [1 2]] 
  [1 0] [[0 0] [0 1] [2 0]]
  [1 2] [[0 3] [1 3] [2 3] [0 2] [0 1]]
  [1 3] [[0 3] [2 3] [1 2] [0 2]]
  [2 0] [[1 0] [3 1] [3 0]]
  [2 3] [[1 3] [1 2] [3 3] [3 2]]
  [3 0] [[2 0] [3 1]]
  [3 1] [[2 0] [3 2] [3 0]]
  [3 2] [[3 3] [2 3] [3 1]]
  [3 3] [[2 3] [3 2]]
  })

(defn branches [node]
  (toy-maze node))


;start 0 3
;0 

